#!/usr/bin/env python3
import argparse
import datetime
import os
import re

import torch
import torchmetrics

import npfl138
npfl138.require_version("2425.7.2")
from npfl138.datasets.morpho_dataset import MorphoDataset

parser = argparse.ArgumentParser()
# These arguments will be set appropriately by ReCodEx, even if you change them.
parser.add_argument("--batch_size", default=10, type=int, help="Batch size.")
parser.add_argument("--cle_dim", default=32, type=int, help="CLE embedding dimension.")
parser.add_argument("--epochs", default=5, type=int, help="Number of epochs.")
parser.add_argument("--max_sentences", default=None, type=int, help="Maximum number of sentences to load.")
parser.add_argument("--recodex", default=False, action="store_true", help="Evaluation in ReCodEx.")
parser.add_argument("--rnn", default="LSTM", choices=["LSTM", "GRU"], help="RNN layer type.")
parser.add_argument("--rnn_dim", default=64, type=int, help="RNN layer dimension.")
parser.add_argument("--seed", default=42, type=int, help="Random seed.")
parser.add_argument("--threads", default=1, type=int, help="Maximum number of threads to use.")
parser.add_argument("--we_dim", default=64, type=int, help="Word embedding dimension.")
parser.add_argument("--word_masking", default=0.0, type=float, help="Mask words with the given probability.")
# If you add more arguments, ReCodEx will keep them with your default values.


class Model(npfl138.TrainableModule):
    class MaskElements(torch.nn.Module):
        """A layer randomly masking elements with a given value."""
        def __init__(self, mask_probability, mask_value):
            super().__init__()
            self._mask_probability = mask_probability
            self._mask_value = mask_value

        def forward(self, inputs: torch.Tensor) -> torch.Tensor:
            # Only mask during training and when the mask probability is non-zero.
            if self.training and self._mask_probability:
                # TODO: Generate a mask tensor of `torch.float32`s of the same shape
                # as `inputs` using either `torch.rand` or `torch.rand_like`.
                # Then replace the inputs elements whose mask value is less than
                # `self._mask_probability` with the value of `self._mask_value`.
                mask = torch.rand_like(inputs, dtype=torch.float32) < self._mask_probability
                inputs = inputs.masked_fill(mask, self._mask_value)
            return inputs

    def __init__(self, args: argparse.Namespace, train: MorphoDataset.Dataset) -> None:
        super().__init__()

        # Create all needed layers.
        # TODO: Create a word masking layer `self.MaskElements` with the given
        # `args.word_masking` probability and `MorphoDataset.UNK` as the masking value.
        self._word_masking = self.MaskElements(args.word_masking, MorphoDataset.UNK)

        # TODO: Create a `torch.nn.Embedding` layer for embedding the character ids
        # from `train.words.char_vocab` to dimensionality `args.cle_dim`.
        self._char_embedding = torch.nn.Embedding(len(train.words.char_vocab), args.cle_dim, padding_idx=MorphoDataset.PAD)

        # TODO: Create a bidirectional `torch.nn.GRU` layer processing the character
        # embeddings, producing output of dimensionality `args.cle_dim`; again, also pass
        # `batch_first=True` to the constructor.
        self._char_rnn = torch.nn.GRU(args.cle_dim, args.cle_dim, batch_first=True, bidirectional=True)

        # TODO(tagger_we): Create a `torch.nn.Embedding` layer, embedding the word ids
        # from `train.words.string_vocab` to dimensionality `args.we_dim`.
        self._word_embedding = torch.nn.Embedding(len(train.words.string_vocab), args.we_dim, padding_idx=MorphoDataset.PAD)

        # TODO: Create an RNN layer, either `torch.nn.LSTM` or `torch.nn.GRU` depending
        # on `args.rnn`. The layer should be bidirectional (`bidirectional=True`) with
        # dimensionality `args.rnn_dim`, and you should also pass `batch_first=True` to
        # the constructor. In the forward pass, the layer will process the word embeddings
        # generated by the `self._word_embedding` layer, **now concatenated with the
        # character-level embeddings**, and we will sum the forward and backward outputs.
        rnn_input_dim = args.we_dim + 2 * args.cle_dim
        self._word_rnn = getattr(torch.nn, args.rnn)(
            rnn_input_dim, args.rnn_dim, batch_first=True, bidirectional=True
        )

        # TODO(tagger_we): Create an output linear layer (`torch.nn.Linear`) processing the RNN output,
        # producing logits for tag prediction; `train.tags.string_vocab` is the tag vocabulary.
        self._output_layer = torch.nn.Linear(args.rnn_dim, len(train.tags.string_vocab))

    def forward(self, word_ids: torch.Tensor, unique_words: torch.Tensor, word_indices: torch.Tensor) -> torch.Tensor:
        # TODO: Mask the input `word_ids` using the `self._word_masking` layer.
        masked_word_ids = self._word_masking(word_ids)

        # TODO: Embed the masked word IDs in `hidden` using the word embedding layer.
        word_embeddings = self._word_embedding(masked_word_ids)

        # TODO: Embed the `unique_words` using the character embedding layer.
        char_embeddings = self._char_embedding(unique_words) # Shape: [num_unique_words, max_word_length, cle_dim]

        # TODO: Pass the character embeddings through the character-level RNN.
        # As during word-level RNN, start by packing the input sequence.
        unique_words_len = torch.sum(unique_words != MorphoDataset.PAD, dim=-1).cpu()
        # Ensure lengths are > 0 for pack_padded_sequence
        unique_words_len = unique_words_len.clamp(min=1)
        packed_chars = torch.nn.utils.rnn.pack_padded_sequence(char_embeddings, unique_words_len, batch_first=True, enforce_sorted=False)

        # Pass the `PackedSequence` through the character RNN. Note that this time
        # we are interested only in the second output (the last hidden state of the RNN).
        _, hidden = self._char_rnn(packed_chars)

        forward, backward = hidden[0], hidden[1]  # Shape: [num_layers * num_directions, batch_size, hidden_dim]

        # TODO: Concatenate the states of the forward and backward directions (in this order).
        char_level_embeddings = torch.cat([forward, backward], dim=-1)

        # TODO: With `cle` being the character-level embeddings of the unique words
        # of shape `[num_unique_words, 2 * cle_dim]`, create the representation of the
        # (not necessary unique) sentence words by indexing the character-level
        # embeddings with the `word_indices`. The result should have a shape
        # `[batch_size, max_sentence_length, 2 * cle_dim]`. You can use for example
        # the `torch.nn.functional.embedding` function.
        sentence_char_embeddings = torch.nn.functional.embedding(word_indices, char_level_embeddings, padding_idx=0) # Use -1 if PAD index can be a valid word index, otherwise not needed

        # TODO: Concatenate the word embeddings with the character-level embeddings (in this order).
        combined_embeddings = torch.cat([word_embeddings, sentence_char_embeddings], dim=-1)

        # TODO(tagger_we): Process the embeddings through the RNN layer. Because the sentences
        # have different length, you have to use `torch.nn.utils.rnn.pack_padded_sequence`
        # to construct a variable-length `PackedSequence` from the input. You need to compute
        # the length of each sentence in the batch (by counting non-`MorphoDataset.PAD` tokens);
        # note that these lengths must be on CPU, so you might need to use the `.cpu()` method.
        # Finally, also pass `batch_first=True` and `enforce_sorted=False` to the call.
        sentence_lens = torch.sum(word_ids != MorphoDataset.PAD, dim=-1).cpu()
        # Ensure lengths are > 0
        sentence_lens = sentence_lens.clamp(min=1)
        packed = torch.nn.utils.rnn.pack_padded_sequence(combined_embeddings, sentence_lens, batch_first=True, enforce_sorted=False)

        # Pass the `PackedSequence` through the RNN.
        packed_output, _ = self._word_rnn(packed)

        # TODO(tagger_we): Unpack the RNN output using the `torch.nn.utils.rnn.pad_packed_sequence` with
        # `batch_first=True` argument. Then sum the outputs of forward and backward directions.
        output, _ = torch.nn.utils.rnn.pad_packed_sequence(packed_output, batch_first=True)

        # TODO(tagger_we): Pass the RNN output through the output layer. Such an output has a shape
        # `[batch_size, sequence_length, num_tags]`, but the loss and the metric expect
        # the `num_tags` dimension to be in front (`[batch_size, num_tags, sequence_length]`),
        # so you need to reorder the dimensions.
        forward_out, backward_out = torch.chunk(output, 2, dim=-1)
        summed_output = forward_out + backward_out  # Shape: [batch_size, max_sentence_length, rnn_dim]

        logits = self._output_layer(summed_output)  # Shape: [batch_size, max_sentence_length, num_tags]
        # Permute to [batch_size, num_tags, max_sentence_length]
        logits = logits.permute(0, 2, 1)

        return logits


class TrainableDataset(npfl138.TransformedDataset):
    def transform(self, example):
        # TODO(tagger_we): Construct a single example, each consisting of the following pair:
        # - a PyTorch tensor of integer ids of input words as input,
        # - a PyTorch tensor of integer tag ids as targets.
        # To create the ids, use `string_vocab` of `self.dataset.words` and `self.dataset.tags`.
        word_ids = torch.tensor(self.dataset.words.string_vocab.indices(example["words"]), dtype=torch.long)
        tag_ids = torch.tensor(self.dataset.tags.string_vocab.indices(example["tags"]), dtype=torch.long)
        # Note that compared to `tagger_we`, we also return the original
        # words in order to be able to compute the character-level embeddings.
        return word_ids, example["words"], tag_ids

    def collate(self, batch):
        # Construct a single batch, where `batch` is a list of examples
        # generated by `transform`.
        word_ids, words, tag_ids = zip(*batch)
        # TODO(tagge_we): Combine `word_ids` into a single tensor, padding shorter
        # sequences to length of the longest sequence in the batch with zeros
        # using `torch.nn.utils.rnn.pad_sequence` with `batch_first=True` argument.
        word_ids = torch.nn.utils.rnn.pad_sequence(word_ids, batch_first=True, padding_value=MorphoDataset.PAD)

        # TODO: Create required inputs for the character-level embeddings using
        # the provided `self.dataset.cle_batch` function on `words`. The function
        # returns a pair of two PyTorch tensors:
        # - `unique_words` with shape `[num_unique_words, max_word_length]` containing
        #   each unique word as a sequence of character ids,
        # - `words_indices` with shape `[num_sentences, max_sentence_length]`
        #   containing for every word its index in `unique_words`.
        unique_words, words_indices = self.dataset.cle_batch(words)
        # TODO(tagger_we): Process `tag_ids` analogously to `word_ids`.
        tag_ids = torch.nn.utils.rnn.pad_sequence(tag_ids, batch_first=True, padding_value=MorphoDataset.PAD)

        # Ensure indices are long tensors
        words_indices = words_indices.long()
        return (word_ids, unique_words, words_indices), tag_ids


def main(args: argparse.Namespace) -> dict[str, float]:
    # Set the random seed and the number of threads.
    npfl138.startup(args.seed, args.threads)
    npfl138.global_keras_initializers()

    # Create logdir name.
    args.logdir = os.path.join("logs", "{}-{}-{}".format(
        os.path.basename(globals().get("__file__", "notebook")),
        datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"),
        ",".join(("{}={}".format(re.sub("(.)[^_]*_?", r"\1", k), v) for k, v in sorted(vars(args).items())))
    ))

    # Load the data.
    morpho = MorphoDataset("czech_cac", max_sentences=args.max_sentences)

    # Prepare the data for training.
    train = TrainableDataset(morpho.train).dataloader(batch_size=args.batch_size, shuffle=True)
    dev = TrainableDataset(morpho.dev).dataloader(batch_size=args.batch_size)

    # Create the model and train.
    model = Model(args, morpho.train)

    model.configure(
        # TODO(tagger_we): Create the Adam optimizer.
        optimizer=torch.optim.Adam(model.parameters()),
        # TODO(tagge_we): Use the usual `torch.nn.CrossEntropyLoss` loss function. Additionally,
        # pass `ignore_index=morpho.PAD` to the constructor so that the padded
        # tags are ignored during the loss computation. Note that the loss
        # expects the input to be of shape `[batch_size, num_tags, sequence_length]`.
        loss=torch.nn.CrossEntropyLoss(ignore_index=MorphoDataset.PAD),
        # TODO(tagger_we): Create a `torchmetrics.Accuracy` metric, passing "multiclass" as
        # the first argument, `num_classes` set to the number of unique tags, and
        # again `ignore_index=morpho.PAD` to ignore the padded tags.
        metrics={"accuracy": torchmetrics.Accuracy(
            task="multiclass", # Updated argument name in newer torchmetrics
            num_classes=len(morpho.train.tags.string_vocab),
            ignore_index=MorphoDataset.PAD)},
        logdir=args.logdir,
    )

    logs = model.fit(train, dev=dev, epochs=args.epochs)

    # Return development metrics for ReCodEx to validate.
    return {metric: value for metric, value in logs.items() if metric.startswith("dev_")}


if __name__ == "__main__":
    main_args = parser.parse_args([] if "__file__" not in globals() else None)
    main(main_args)


